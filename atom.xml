<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>try-catch的博客</title>
  
  
  <link href="/blogs/atom.xml" rel="self"/>
  
  <link href="https://machunlin.github.io/blogs/"/>
  <updated>2019-03-05T11:42:29.833Z</updated>
  <id>https://machunlin.github.io/blogs/</id>
  
  <author>
    <name>machunlin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BigDecimal工具类之RoundMode</title>
    <link href="https://machunlin.github.io/blogs/2019/03/05/BigDecimalRoundMode/"/>
    <id>https://machunlin.github.io/blogs/2019/03/05/BigDecimalRoundMode/</id>
    <published>2019-03-05T10:28:15.000Z</published>
    <updated>2019-03-05T11:42:29.833Z</updated>
    
    <content type="html"><![CDATA[<p>java涉及金额计算的场景，不要使用float或double进行计算，会丢失精度。</p><p>一般使用BigDecimal工具类，并配合“舍入模式(Rounding mode)”和小数精度(scale)。<br>Rounding Mode概念不好理解，也不容易讲清楚，看到这篇博客讲的非常好，转载之。</p><p>原文链接： <a href="https://my.oschina.net/sunchp/blog/670909" target="_blank" rel="noopener">BigDecimal 舍入模式（Rounding mode）介绍</a></p><h1 id="RoundingMode介绍"><a href="#RoundingMode介绍" class="headerlink" title="RoundingMode介绍"></a>RoundingMode介绍</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package java.math;</span><br><span class="line"></span><br><span class="line">public enum RoundingMode &#123;</span><br><span class="line"></span><br><span class="line">    UP(BigDecimal.ROUND_UP),</span><br><span class="line"></span><br><span class="line">    DOWN(BigDecimal.ROUND_DOWN),</span><br><span class="line"></span><br><span class="line">    CEILING(BigDecimal.ROUND_CEILING),</span><br><span class="line"></span><br><span class="line">    FLOOR(BigDecimal.ROUND_FLOOR),</span><br><span class="line"></span><br><span class="line">    HALF_UP(BigDecimal.ROUND_HALF_UP),</span><br><span class="line"></span><br><span class="line">    HALF_DOWN(BigDecimal.ROUND_HALF_DOWN),</span><br><span class="line"></span><br><span class="line">    HALF_EVEN(BigDecimal.ROUND_HALF_EVEN),</span><br><span class="line"></span><br><span class="line">    UNNECESSARY(BigDecimal.ROUND_UNNECESSARY);</span><br><span class="line"></span><br><span class="line">    final int oldMode;</span><br><span class="line"></span><br><span class="line">    private RoundingMode(int oldMode) &#123;</span><br><span class="line">        this.oldMode = oldMode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static RoundingMode valueOf(int rm) &#123;</span><br><span class="line">        switch(rm) &#123;</span><br><span class="line"></span><br><span class="line">        case BigDecimal.ROUND_UP:</span><br><span class="line">            return UP;</span><br><span class="line"></span><br><span class="line">        case BigDecimal.ROUND_DOWN:</span><br><span class="line">            return DOWN;</span><br><span class="line"></span><br><span class="line">        case BigDecimal.ROUND_CEILING:</span><br><span class="line">            return CEILING;</span><br><span class="line"></span><br><span class="line">        case BigDecimal.ROUND_FLOOR:</span><br><span class="line">            return FLOOR;</span><br><span class="line"></span><br><span class="line">        case BigDecimal.ROUND_HALF_UP:</span><br><span class="line">            return HALF_UP;</span><br><span class="line"></span><br><span class="line">        case BigDecimal.ROUND_HALF_DOWN:</span><br><span class="line">            return HALF_DOWN;</span><br><span class="line"></span><br><span class="line">        case BigDecimal.ROUND_HALF_EVEN:</span><br><span class="line">            return HALF_EVEN;</span><br><span class="line"></span><br><span class="line">        case BigDecimal.ROUND_UNNECESSARY:</span><br><span class="line">            return UNNECESSARY;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">            throw new IllegalArgumentException(&quot;argument out of range&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RoundingMode是一个枚举类，有以下几个值：UP，DOWN，CEILING，FLOOR，HALF_UP，HALF_DOWN，HALF_EVEN，UNNECESSARY</p><h1 id="舍入模式"><a href="#舍入模式" class="headerlink" title="舍入模式"></a>舍入模式</h1><h2 id="UP"><a href="#UP" class="headerlink" title="UP"></a>UP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final static int ROUND_UP = 0;</span><br></pre></td></tr></table></figure><p>定义：远离零方向舍入。</p><p>解释：始终对非零舍弃部分前面的数字加 1。注意，此舍入模式始终不会减少计算值的绝对值。</p><p>图示：<br><img src="https://upload.cc/i1/2019/03/05/BP5tdu.png" alt="Markdown"></p><p>示例：</p><table><thead><tr><th>输入数字</th><th>使用 UP 舍入模式将输入数字舍入为一位数</th></tr></thead><tbody><tr><td>5.5</td><td>6</td></tr><tr><td>2.5</td><td>3</td></tr><tr><td>1.6</td><td>2</td></tr><tr><td>1.1</td><td>2</td></tr><tr><td>1.0</td><td>1</td></tr><tr><td>-1.0</td><td>-1</td></tr><tr><td>-1.1</td><td>-2</td></tr><tr><td>-1.6</td><td>-2</td></tr><tr><td>-2.5</td><td>-3</td></tr><tr><td>-5.5</td><td>-6</td></tr></tbody></table><h2 id="DOWN"><a href="#DOWN" class="headerlink" title="DOWN"></a>DOWN</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final static int ROUND_DOWN = 1;</span><br></pre></td></tr></table></figure><p>定义：向零方向舍入。</p><p>解释：从不对舍弃部分前面的数字加 1（即截尾）。注意，此舍入模式始终不会增加计算值的绝对值。</p><p>图示：<br><img src="https://upload.cc/i1/2019/03/05/BOZqdA.png" alt="Markdown"></p><p>示例：</p><table><thead><tr><th>输入数字</th><th>使用 DOWN 舍入模式将输入数字舍入为一位数</th></tr></thead><tbody><tr><td>5.5</td><td>5</td></tr><tr><td>2.5</td><td>2</td></tr><tr><td>1.6</td><td>1</td></tr><tr><td>1.1</td><td>1</td></tr><tr><td>1.0</td><td>1</td></tr><tr><td>-1.0</td><td>-1</td></tr><tr><td>-1.1</td><td>-1</td></tr><tr><td>-1.6</td><td>-1</td></tr><tr><td>-2.5</td><td>-2</td></tr><tr><td>-5.5</td><td>-5</td></tr></tbody></table><h2 id="CEILING"><a href="#CEILING" class="headerlink" title="CEILING"></a>CEILING</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final static int ROUND_CEILING = 2;</span><br></pre></td></tr></table></figure><p>定义：向正无限大方向舍入。</p><p>解释：如果结果为正，则舍入行为类似于 RoundingMode.UP；如果结果为负，则舍入行为类似于RoundingMode.DOWN。注意，此舍入模式始终不会减少计算值。</p><p>图示：<br><img src="https://upload.cc/i1/2019/03/05/cQqTR9.png" alt="Markdown"></p><p>示例：</p><table><thead><tr><th>输入数字</th><th>使用 CEILING 舍入模式将输入数字舍入为一位数</th></tr></thead><tbody><tr><td>5.5</td><td>6</td></tr><tr><td>2.5</td><td>3</td></tr><tr><td>1.6</td><td>2</td></tr><tr><td>1.1</td><td>2</td></tr><tr><td>1.0</td><td>1</td></tr><tr><td>-1.0</td><td>-1</td></tr><tr><td>-1.1</td><td>-1</td></tr><tr><td>-1.6</td><td>-1</td></tr><tr><td>-2.5</td><td>-2</td></tr><tr><td>-5.5</td><td>-5</td></tr></tbody></table><h2 id="FLOOR"><a href="#FLOOR" class="headerlink" title="FLOOR"></a>FLOOR</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final static int ROUND_FLOOR = 3;</span><br></pre></td></tr></table></figure><p>定义：向负无限大方向舍入。</p><p>解释：如果结果为正，则舍入行为类似于 RoundingMode.DOWN；如果结果为负，则舍入行为类似于RoundingMode.UP。注意，此舍入模式始终不会增加计算值。</p><p>图示：<br><img src="https://upload.cc/i1/2019/03/05/1n7Tqt.png" alt="Markdown"></p><p>示例：</p><table><thead><tr><th>输入数字</th><th>使用 FLOOR 舍入模式将输入数字舍入为一位数</th></tr></thead><tbody><tr><td>5.5</td><td>5</td></tr><tr><td>2.5</td><td>2</td></tr><tr><td>1.6</td><td>1</td></tr><tr><td>1.1</td><td>1</td></tr><tr><td>1.0</td><td>1</td></tr><tr><td>-1.0</td><td>-1</td></tr><tr><td>-1.1</td><td>-2</td></tr><tr><td>-1.6</td><td>-2</td></tr><tr><td>-2.5</td><td>-3</td></tr><tr><td>-5.5</td><td>-6</td></tr></tbody></table><h2 id="HALF-UP"><a href="#HALF-UP" class="headerlink" title="HALF_UP"></a>HALF_UP</h2><p>Half指的中点值，例如0.5、0.05，0.15等等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final static int ROUND_HALF_UP = 4;</span><br></pre></td></tr></table></figure><p>定义：向最接近的数字方向舍入，如果与两个相邻数字的距离相等，则向上舍入。</p><p>解释：如果被舍弃部分 &gt;= 0.5，则舍入行为同 RoundingMode.UP；否则舍入行为同RoundingMode.DOWN。注意，此舍入模式就是通常学校里讲的四舍五入。</p><p>图示：<br><img src="https://upload.cc/i1/2019/03/05/8Pj5z3.png" alt="此处输入图片的描述"></p><p>示例：</p><table><thead><tr><th>输入数字</th><th>使用 HALF_UP 舍入模式将输入数字舍入为一位数</th></tr></thead><tbody><tr><td>5.5</td><td>6</td></tr><tr><td>2.5</td><td>3</td></tr><tr><td>1.6</td><td>2</td></tr><tr><td>1.1</td><td>1</td></tr><tr><td>1.0</td><td>1</td></tr><tr><td>-1.0</td><td>-1</td></tr><tr><td>-1.1</td><td>-1</td></tr><tr><td>-1.6</td><td>-2</td></tr><tr><td>-2.5</td><td>-3</td></tr><tr><td>-5.5</td><td>-6</td></tr></tbody></table><h2 id="HALF-DOWN"><a href="#HALF-DOWN" class="headerlink" title="HALF_DOWN"></a>HALF_DOWN</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final static int ROUND_HALF_DOWN = 5;</span><br></pre></td></tr></table></figure><p>定义：向最接近的数字方向舍入，如果与两个相邻数字的距离相等，则向下舍入。</p><p>解释：如果被舍弃部分 &gt; 0.5，则舍入行为同 RoundingMode.UP；否则舍入行为同RoundingMode.DOWN。注意，此舍入模式就是通常讲的五舍六入。</p><p>图示：</p><p><img src="https://upload.cc/i1/2019/03/05/V0Lomu.png" alt="Markdown"></p><p>示例：</p><table><thead><tr><th>输入数字</th><th>使用 HALF_DOWN 舍入模式将输入数字舍入为一位数</th></tr></thead><tbody><tr><td>5.5</td><td>5</td></tr><tr><td>2.5</td><td>2</td></tr><tr><td>1.6</td><td>2</td></tr><tr><td>1.1</td><td>1</td></tr><tr><td>1.0</td><td>1</td></tr><tr><td>-1.0</td><td>-1</td></tr><tr><td>-1.1</td><td>-1</td></tr><tr><td>-1.6</td><td>-2</td></tr><tr><td>-2.5</td><td>-2</td></tr><tr><td>-5.5</td><td>-5</td></tr></tbody></table><h2 id="HALF-EVEN"><a href="#HALF-EVEN" class="headerlink" title="HALF_EVEN"></a>HALF_EVEN</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final static int ROUND_HALF_EVEN = 6;</span><br></pre></td></tr></table></figure><p>定义：向最接近数字方向舍入，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。</p><p>解释：如果舍弃部分左边的数字为奇数，则舍入行为同 RoundingMode.HALF_UP；如果为偶数，则舍入行为同RoundingMode.HALF_DOWN。注意，在重复进行一系列计算时，根据统计学，此舍入模式可以在统计上将累加错误减到最小。此舍入模式也称为“银行家舍入法”，主要在美国使用。此舍入模式类似于 Java 中对float 和double 算法使用的舍入策略。</p><p>图示：</p><p><img src="https://upload.cc/i1/2019/03/05/6fwBlS.png" alt="Markdown"></p><p>示例：</p><p>|输入数字|    使用 HALF_EVEN 舍入模式将输入数字舍入为一位数|<br>|5.5|    6|<br>|2.5|    2|<br>|1.6|    2|<br>|1.1|    1|<br>|1.0|    1|<br>|-1.0|    -1|<br>|-1.1|    -1|<br>|-1.6|    -2|<br>|-2.5|    -2|<br>|-5.5|    -6|</p><h2 id="UNNECESSARY"><a href="#UNNECESSARY" class="headerlink" title="UNNECESSARY"></a>UNNECESSARY</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final static int ROUND_UNNECESSARY =  7;</span><br></pre></td></tr></table></figure><p>定义：用于断言请求的操作具有精确结果，因此不发生舍入。</p><p>解释：计算结果是精确的，不需要舍入，否则抛出 ArithmeticException。</p><p>示例：</p><table><thead><tr><th>输入数字</th><th>使用 UNNECESSARY 舍入模式将输入数字舍入为一位数</th></tr></thead><tbody><tr><td>5.5</td><td>抛出 ArithmeticException</td></tr><tr><td>2.5</td><td>抛出 ArithmeticException</td></tr><tr><td>1.6</td><td>抛出 ArithmeticException</td></tr><tr><td>1.1</td><td>抛出 ArithmeticException</td></tr><tr><td>1.0</td><td>1</td></tr><tr><td>-1.0</td><td>-1</td></tr><tr><td>-1.1</td><td>抛出 ArithmeticException</td></tr><tr><td>-1.6</td><td>抛出 ArithmeticException</td></tr><tr><td>-2.5</td><td>抛出 ArithmeticException</td></tr><tr><td>-5.5</td><td>抛出 ArithmeticException</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;java涉及金额计算的场景，不要使用float或double进行计算，会丢失精度。&lt;/p&gt;
&lt;p&gt;一般使用BigDecimal工具类，并配合“舍入模式(Rounding mode)”和小数精度(scale)。&lt;br&gt;Rounding Mode概念不好理解，也不容易讲清楚，看
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>支付中心设计</title>
    <link href="https://machunlin.github.io/blogs/2019/03/02/paycenter/"/>
    <id>https://machunlin.github.io/blogs/2019/03/02/paycenter/</id>
    <published>2019-03-02T03:55:11.000Z</published>
    <updated>2019-03-05T11:54:06.361Z</updated>
    
    <content type="html"><![CDATA[<p>支付中心最近接入了商业票据功能，接下来准备启动赊销功能的开发，以及规划的清结算相关功能。<br>今天规划了新版的架构，并把老版本相关设计文档也梳理下。</p><p>先贴出新版的总体架构图：<br><img src="https://upload.cc/i1/2019/03/05/9NQ8sU.png" alt="Markdown"></p><p>下面是第一版的文档。</p><p>第一版整体架构图：<br><img src="https://upload.cc/i1/2019/03/05/Ubmo3y.png" alt="Markdown"></p><p>第一版模块关系图：<br><img src="https://upload.cc/i1/2019/03/05/FiQ6tf.png" alt="Markdown"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;支付中心最近接入了商业票据功能，接下来准备启动赊销功能的开发，以及规划的清结算相关功能。&lt;br&gt;今天规划了新版的架构，并把老版本相关设计文档也梳理下。&lt;/p&gt;
&lt;p&gt;先贴出新版的总体架构图：&lt;br&gt;&lt;img src=&quot;https://upload.cc/i1/2019/03
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>会计相关概念</title>
    <link href="https://machunlin.github.io/blogs/2019/03/01/kuaiji/"/>
    <id>https://machunlin.github.io/blogs/2019/03/01/kuaiji/</id>
    <published>2019-03-01T05:52:46.000Z</published>
    <updated>2019-03-05T12:00:04.039Z</updated>
    
    <content type="html"><![CDATA[<p>今天看了《会计核算模式与账务系统设计-刘德红主编》一书，学习了会计科目、账簿和财务报表等相关基础概念。<br>把相关知识点总结如下。</p><p><a href="http://i1.bvimg.com/678568/77b4bde3d1ac6a9c.png" target="_blank" rel="noopener">下载图片</a></p><p><img src="http://i1.bvimg.com/678568/77b4bde3d1ac6a9c.png" alt="会计相关概念"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天看了《会计核算模式与账务系统设计-刘德红主编》一书，学习了会计科目、账簿和财务报表等相关基础概念。&lt;br&gt;把相关知识点总结如下。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://i1.bvimg.com/678568/77b4bde3d1ac6a9c.png&quot; targe
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>myblog</title>
    <link href="https://machunlin.github.io/blogs/2019/02/28/hello/"/>
    <id>https://machunlin.github.io/blogs/2019/02/28/hello/</id>
    <published>2019-02-28T11:07:13.000Z</published>
    <updated>2019-03-05T09:22:28.730Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java性能分析与问题定位</title>
    <link href="https://machunlin.github.io/blogs/2019/02/28/javaPerformance/"/>
    <id>https://machunlin.github.io/blogs/2019/02/28/javaPerformance/</id>
    <published>2019-02-28T03:21:13.000Z</published>
    <updated>2019-03-15T09:30:16.638Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们来聊下生产环境排查、定位问题的工具和方法。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>jdk提供的工具类，可以用来获取java进程的内存、线程、垃圾回收等信息。</p><ul><li><p>jstack —— 获取线程堆栈信息：<br><code>jstack -l  7055 &gt; store-back.jstatck</code></p></li><li><p>jmap —— 获取堆中的对象信息（类的实例等）<br><code>jmap -dump:format=b,file=store-back.hprof 12131</code><br> 说明：需要使用<a href="https://www.eclipse.org/mat/" target="_blank" rel="noopener">eclipse MAT</a>或者jhat工具配合，解析dump下来的内存文件。</p></li><li><p>OOM时自动dump方式，在java启动脚本上添加jvm命令：<br><code>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${目录}</code></p></li><li><p>jstat —— jvm的统计信息，包含内存使用情况、垃圾回收时间、类加载等信息：<br><code>jstat -gcutil 21891 250 7</code><br>   说明：21891 进程号； 250ms 采样间隔时间，单位毫秒； 7 采集次数</p></li></ul><h1 id="APM监控工具"><a href="#APM监控工具" class="headerlink" title="APM监控工具"></a>APM监控工具</h1><p>  通常，排查生产环境的问题，我们不会远程连到服务器，使用jstack、jmap命令获取相关信息，因为这样效率太低，而且生产环境有诸多限制。<br>  我比较习惯使用APM(Application Performance Monitor)工具来快速定位和排查问题，比如<a href="https://github.com/naver/pinpoint" target="_blank" rel="noopener">pinpoint</a>就是一款非常优秀的APM工具。</p><ul><li><p>在pinpoint首页，我们可以看到应用程序之间的拓扑图，调用次数(一般生产环境采样率为10%)，如下图。<br><img src="https://i.loli.net/2019/03/15/5c8b547fcf89d.png" alt="pinpoint首页"></p></li><li><p>图片右上角部分（如下图），有很多绿色的小点点，每个点代表一次http请求，横坐标为请求时间，纵坐标为该次请求的耗时（毫秒）；红色的点表示该次请求抛异常。<br><img src="https://i.loli.net/2019/03/15/5c8b547c6d277.png" alt="请求"></p></li><li><p>我们可以用鼠标框住耗时最长的一部分“小点”，就可以查看每个请求的调用链(如下图)，调用链精确到某个应用的某个类的某个方法，并打印出执行的SQL语句；以及每个方法的执行耗时和百分比。<br><img src="https://i.loli.net/2019/03/15/5c8b547f348e9.png" alt="调用链"></p></li><li><p>点击“inspector”按钮，可以看到每个应用(jvm进程)的内存分配情况，比如堆、永久区(java8为metaspace)占用空间，GC执行耗时，CPU消耗，每秒事务数(TPS)，活跃线程数，请求响应时间，堆外直接内存空间等等数据。一目了然，犹如上帝视角。<br><img src="https://i.loli.net/2019/03/15/5c8b547f13e68.png" alt="此处输入图片的描述"></p></li></ul><h1 id="eclipseMAT内存分析工具"><a href="#eclipseMAT内存分析工具" class="headerlink" title="eclipseMAT内存分析工具"></a>eclipseMAT内存分析工具</h1><p>还记得第一步“常用工具”中的两个命令吧：<br><code>jmap -dump:format=b,file=store-back.hprof 12131</code><br><code>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${目录}</code><br>eclipseMAT就是用来分析dump下来的内存文件的。</p><ul><li><p>用MAT生成内存泄漏分析报告,如下图：<br><img src="https://i.loli.net/2019/03/15/5c8b547d365a0.png" alt="内存泄漏报告"></p></li><li><p>通过直方图(Histogram)和支配树(Dorminator Tree)分析内存泄漏：<br><img src="https://i.loli.net/2019/03/15/5c8b548285d44.png" alt="直方图支配树"></p></li></ul><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><p> 首先，我们通过决策树(Dorminator Tree)来分析，按package分组：<br><img src="https://i.loli.net/2019/03/15/5c8b54829cc78.png" alt="支配树"></p><ul><li>找到占用内存最大的类，如下图。</li></ul><p>浅堆(shallow heap) : 指某一个对象本身所占内存大小（也包括外部对象的”引用”，每个外部对象的”引用”为4或8个字节，分析时一般都是忽略这部分）。</p><p>保留堆(retained heap): 指对象本身和引用的“外部对象”的内存大小，但不包括“共享对象”(共享对象的概念后面会讲到)。</p><p>深堆(deep heap): 指对象本身和引用的“外部对象”的内存大小。</p><p>MAT只显示浅堆和保留堆的大小，很明显，浅堆和保留堆所占空间差距过大，就非常有可能是“内存泄漏”了。<br><img src="https://i.loli.net/2019/03/15/5c8b68b66c0e8.png" alt="支配树分组"></p><ul><li><p>在这里，我们怀疑Activity对象可能泄漏内存，于是查下引用此对象的是谁(with incoming references)。<br><img src="https://i.loli.net/2019/03/15/5c8b68b55e3c2.png" alt="incoming"></p></li><li><p>我们大概看一眼，就会发现，主要是WebAppClassLoader持有大量Activity对象的引用。<br><img src="https://i.loli.net/2019/03/15/5c8b68b55c4a7.png" alt="activity对象的引用者"></p></li><li><p>使用合并最短根路径(GC ROOTS)方式，检查对象的引用路径,如下图。</p></li></ul><p>Merge Shortest Path To GC Roots：<br>快速分析的一个常用功能，它能够从当前内存映像中找到一条指定对象所在的到GC Root的最短路径。</p><p>需要排除弱引用、软引用及影子引用等，一般来说这三种类型的引用都不会是造成内存泄漏的原因，<br>因为JVM迟早是会回收只存在这三种引用的资源的。<br><img src="https://i.loli.net/2019/03/15/5c8b68b506c60.png" alt="gcroots"></p><ul><li>再次确认，要是WebAppClassLoader持有大量Activity对象的引用。<br>我们通过决策树的方式分析，大概可以判断Activity对象是内存泄漏的最大嫌疑人。<br><img src="https://i.loli.net/2019/03/15/5c8b68b3ed026.png" alt="activity"></li></ul><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><p>下面我们再通过直方图的方式分析。</p><p>直方图首页，依然通过浅堆和保留堆来分析，发现FindShoppingCartByType对象可能导致内存泄漏。<br><img src="https://i.loli.net/2019/03/15/5c8b68b4b46ca.png" alt="直方图首页"></p><ul><li><p>查看引用人是谁(with incoming references)<br><img src="https://i.loli.net/2019/03/15/5c8b68b49fefe.png" alt="直方图引用人"></p></li><li><p>咦，又看到熟悉的人了，Activity……<br><img src="https://i.loli.net/2019/03/15/5c8b68b4b02ee.png" alt="incoming"></p></li><li><p>依然使用合并最短根路径(GC ROOTS)方式，检查对象的引用路径,如下图。<br><img src="https://i.loli.net/2019/03/15/5c8b68b4d62a4.png" alt="gcroots"></p></li><li><p>根据下图，得出结论：<br>主要是WebAppClassLoader持有大量Activity对象的引用；<br>Activity对象持有大量FindShoppingCartByType对象的引用。</p></li></ul><p><img src="https://i.loli.net/2019/03/15/5c8b68b44bb7d.png" alt="gcroots"></p><p>因为本例的程序是部署在tomcat中，这就相当于是Activity对象常驻内存，无法在GC时释放。<br>通过阅读代码，发现Activity对象是使用static声明的变量，符合我们的推断。至此，内存泄漏问题定位到了原因，后面就是改代码啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我们来聊下生产环境排查、定位问题的工具和方法。&lt;/p&gt;
&lt;h1 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h1&gt;&lt;p&gt;jdk提供的工具类，可以用来获取java进程的内存、线程、
      
    
    </summary>
    
    
  </entry>
  
</feed>
